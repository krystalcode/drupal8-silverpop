<?php

/**
 * @file
 * Code for the silverpop module.
 */

use Drupal\silverpop\Event\SilverpopEvent;
use Drupal\silverpop\Event\SilverpopEvents;
use Symfony\Cmf\Component\Routing\RouteObjectInterface;

/**
 * @file
 * Contains code for the silverpop module.
 */

/**
 * Implements hook_page_attachments().
 *
 * This is where we actually send out the event/page tracking data to Silverpop.
 */
function silverpop_page_attachments(array &$attachments) {
  // Don't process further if the user has disabled Silverpop tracking.
  $config = \Drupal::service('config.factory')
    ->get('silverpop.admin_settings');
  if (!$config->get('status')) {
    return;
  }

  $service = \Drupal::service('silverpop.silverpop');
  if (!$enabled_events = $service->silverpopGetEventsEnabledForCurrentPage()) {
    return;
  }

  // Page tracking.
  _silverpop_add_page_tracking($attachments);

  // Web tracking.
  _silverpop_add_web_tracking($attachments);

  // Add our js library.
  $attachments['#attached']['library'][] = 'silverpop/silverpop';

  // Event tracking.
  _silverpop_add_event_tracking($attachments, $enabled_events, $service);
}

/**
 * Add Silverpop page tracking.
 *
 * @param array $attachments
 *   The page attachments array.
 */
function _silverpop_add_page_tracking(array &$attachments) {
  $config = \Drupal::service('config.factory')
    ->get('silverpop.admin_settings');
  $domains = $config->get('silverpop_tracked_domains');

  if ($domains) {
    $description = [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'com.silverpop.brandeddomains',
        'content' => $domains,
      ],
    ];
    $attachments['#attached']['html_head'][] = [$description, 'description'];
  }
  // Else, if no domains have been set, log an error.
  else {
    \Drupal::logger('silverpop')
      ->error('Silverpop tracked domains have not been set.');
  }
}

/**
 * Add custom page name meta tag for Silverpop web tracking summary report.
 *
 * @param array $attachments
 *   The page attachments array.
 */
function _silverpop_add_web_tracking(array &$attachments) {
  // Get the current page title first.
  $request = \Drupal::request();
  $route = $request
    ->attributes
    ->get(RouteObjectInterface::ROUTE_OBJECT);

  $title = '';
  if ($route) {
    $title = \Drupal::service('title_resolver')->getTitle($request, $route);
  }

  $description = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'com.silverpop.pagename',
      'content' => $title,
    ],
  ];
  $attachments['#attached']['html_head'][] = [$description, 'description'];
}

/**
 * Add event tracking for each enabled event on a page.
 *
 * @param array $attachments
 *   The page attachments array.
 * @param array $enabled_events
 *   An array of silverpop_event_type entities.
 * @param object $service
 *   The silverpop service object.
 */
function _silverpop_add_event_tracking(array &$attachments, array $enabled_events, $service) {
  foreach ($enabled_events as $event_type) {
    /** @var \Drupal\silverpop\Entity\SilverpopEventType $event_type */
    // An empty CSS selector denotes that this event is a page tracking event.
    if (!$css_selector = $event_type->getCssSelector()) {
      continue;
    }

    // Load the Symfony event dispatcher object through services.
    $dispatcher = \Drupal::service('event_dispatcher');
    // Create our event class object.
    $event = new SilverpopEvent($event_type);
    // Dispatch the event.
    $dispatcher->dispatch(SilverpopEvents::BEFORE_SUBMIT, $event);

    // Finally, add the tracking info in the drupalSettings so our js library
    // can pick it up.
    $tracking_js = [
      'name' => $event_type->label(),
      'type' => $event_type->id(),
      'cssSelector' => $css_selector,
    ];

    $attachments['#attached']['drupalSettings']['silverpop']['events'][$event_type->id()] = $tracking_js;
  }
}

/**
 * Implements hook_library_info_build().
 */
function silverpop_library_info_build() {
  // Load our external silverpop js with the url from silverpop.admin_settings.
  $config = \Drupal::service('config.factory')
    ->get('silverpop.admin_settings');

  // Don't process further if the user has disabled Silverpop tracking.
  if (!$config->get('status')) {
    return;
  }

  // Don't process further if we don't have a script file.
  $silverpop_js_src = $config->get('silverpop_script_src');
  if (!$silverpop_js_src) {
    return;
  }

  $libraries = [];

  $libraries['silverpop_external_js'] = [
    'version' => '1.x',
    'header' => TRUE,
    'js' => [
      $silverpop_js_src => [
        'type' => 'external',
        'minified' => TRUE,
      ],
    ],
  ];

  return $libraries;
}
